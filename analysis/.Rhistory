meta = mx[,2]
names(meta)= mx[,1]
char = read.xlsx(fileName,2)
# Make sure char notes and line notes are separate
if("Notes" %in% names(char)){
names(char)[names(char)=="Notes"] = "Char.Notes"
} else{
char$Char.Notes = ""
}
# Load line data
d = read.xlsx(fileName,3)
d$File = gsub("é","é",fileName)
for(m in names(meta)){
d[,m] = meta[m]
}
d$Speaker = trimws(d$Speaker)
d$Interlocutor = trimws(d$Interlocutor)
# Speaker properties
d = cbind(d,char[match(d$Speaker,char$Name),2:ncol(char)])
# interlocutor properties
int = char[match(d$Interlocutor,char$Name),2:ncol(char)]
names(int) = paste0("Int.",names(int))
d = cbind(d,int)
# Check missing characters
spkrsInText = unique(d$Speaker[!is.na(d$Speaker)])
spkrsInText = spkrsInText[spkrsInText!="Audience"]
spkrsInText = spkrsInText[spkrsInText!="Narrator"]
interlocInText = unique(d$Interlocutor[!is.na(d$Interlocutor)])
interlocInText = interlocInText[interlocInText!="Audience"]
interlocInText = interlocInText[interlocInText!="Narrator"]
if(length(spkrsInText)>0){
interlocInText = unique(trimws(unlist(strsplit(interlocInText,"&"))))
spkrsInText = unique(trimws(unlist(strsplit(spkrsInText,"&"))))
} else{
#print("   Warning: No characters coded")
}
charsMissingSPK = spkrsInText[!spkrsInText %in% char$Name]
if(length(charsMissingSPK)>0){
for(cx in charsMissingSPK){
#print(paste0("   Missing speaker: '",cx,"'"))
}
}
charsMissing = interlocInText[!interlocInText %in% char$Name]
if(length(charsMissing)>0){
for(cx in charsMissing){
#print(paste0("   Missing interlocutor: '",cx,"'"))
}
}
d = d[!is.na(d$OriginalText),]
d$OriginalText = gsub("^[ \t]+","",d$OriginalText)
d$OriginalText = gsub("[ \t]$+","",d$OriginalText)
d = d[nchar(d$OriginalText)>0,]
d$LineNumber = 1:nrow(d)
names(d) = gsub("[\\(\\)/]","",names(d))
names(d) = gsub(" +",".",names(d))
names(d) = gsub("\\.+",".",names(d))
names(d)[names(d)=="SecondaryRepresentationType"] = "SecondaryRepresentation.Type"
names(d)[names(d)=="Place.of.composition.Primary"] = "Place.of.Composition.Primary"
names(d)[names(d)=="Place.of.composition.Secondary"] = "Place.of.Composition.Secondary"
names(d)[names(d)=="HumanityPrimary)"] = "Humanity.Primary"
names(d)[names(d)=="HumanityPrimary"] =  "Humanity.Primary"
# names(d)[names(d)=="Humanity.(Primary)"] = "Humanity.Primary"
names(d)[names(d)=="HumanitySecondary"] = "Humanity.Secondary"
names(d)[names(d)=="Int.HumanityPrimary"] = "Int.Humanity.Primary"
names(d)[names(d)=="Int.HumanitySecondary"] = "Int.Humanity.Secondary"
# names(d)[names(d)=="Int.HumanityPrimary)"] = "Int.Humanity.Primary"
# names(d)[names(d)=="Int.HumanityPrimary"] = "Int.Humanity.Primary"
# names(d)[names(d)=="Int.Humanity.(Primary)"] = "Int.Humanity.Primary"
# names(d)[names(d)=="Int.HumanitySecondary)"] = "Int.Humanity.Secondary"
# names(d)[names(d)=="Int.Humanity.(Secondary)"] = "Int.Humanity.Secondary"
names(d)[names(d)=="Nationality./.Race"] = "NationalityRace"
names(d)[names(d)=="Nationality.Race"] = "NationalityRace"
names(d)[names(d)=="Int.Nationality./.Race"] = "Int.NationalityRace"
names(d)[names(d)=="Int.Nationality.Race"] = "Int.NationalityRace"
if(!"Notes" %in% names(d)){
d$Notes = ""
}
# Trim leading and trailing whitespace
for(var in names(d)){
d[,var]= trimws(d[,var])
}
return(d)
}
folder = "../data/coding/"
dAll = NULL
fileList = c("Sir Isumbras_HM_Recode.xlsx",
"Lay le Freine_HM_Recode.xlsx",
"Sir Orfeo_HM_Recode.xlsx",
"Sir Isumbras.xlsx",
"Lay le Freine.xlsx",
"Sir Orfeo.xlsx")
for(file in fileList){
dx = loadFile(paste0(folder,file))
# Make sure all columns are present
if((!is.null(dAll)) & (!all(names(dx) %in% names(dAll)))){
stop(paste(file,": missing columns",paste(setdiff(names(dAll),names(dx)))))
}
# Make sure order is correct
if((!is.null(dAll)) & !identical(names(dx),names(dAll))){
dx = dx[,names(dAll)]
}
# Add to main data
dAll = rbind(dAll,dx)
}
compareCodings = function(f1,f2,var = "RepresentationMode"){
d1 = dAll[dAll$File == f1,]
d2 = dAll[dAll$File == f2,]
# Check conformity
print(paste("Lines align:",all(d1$OriginalText==d2$OriginalText)))
tx = table(d1[,var], d2[,var], useNA = "always")
if("Writing" %in% rownames(tx)){
tx = cbind(tx[,1:2],c(0,0,0,0),tx[,3])
colnames(tx) = c("Speech","Thought","Writing","<NA>")
}
print(tx)
print(paste("Agreement = ",sum(diag(tx))/sum(tx)))
print(kappa2(cbind(d1[,var],d2[,var])))
}
f1 = "../data/coding/Sir Isumbras.xlsx"
f2 = "../data/coding/Sir Isumbras_HM_Recode.xlsx"
var = "RepresentationMode"
d1 = dAll[dAll$File == f1,]
d2 = dAll[dAll$File == f2,]
# Check conformity
print(paste("Lines align:",all(d1$OriginalText==d2$OriginalText)))
# Remove one duplicated line from Sir Isumbras
dAll = dAll[(dAll$File != "../data/coding/Sir Isumbras.xlsx") |
(dAll$LineNumber!="411"),]
d1 = dAll[dAll$File == f1,]
d2 = dAll[dAll$File == f2,]
# Check conformity
print(paste("Lines align:",all(d1$OriginalText==d2$OriginalText)))
tx = table(d1[,var], d2[,var], useNA = "always")
tx
table(d1[,var], as.numeric(as.factor(d2[,var])), useNA = "always")
table(c1,c2,useNA="always")
c1 = c("Speech",NA,NA,NA,"Thought","Speech","Speech","Thought",NA)
c2 = c("Speech",NA,NA,NA,"Speech","Speech","Speech","Thought",NA)
table(c1,c2,useNA="always")
c1 = c("Speech",NA,NA,NA,"Thought","Speech","Speech","Thought","Thought","Thought",NA)
c2 = c("Speech",NA,NA,NA,"Speech","Speech","Speech","Thought","Thought","Thought",NA)
table(c1,c2,useNA="always")
f1 = "../data/coding/Lay le Freine.xlsx"
f2 = "../data/coding/Lay le Freine_HM_Recode.xlsx"
d1 = dAll[dAll$File == f1,]
d2 = dAll[dAll$File == f2,]
# Check conformity
print(paste("Lines align:",all(d1$OriginalText==d2$OriginalText)))
tx = table(d1[,var], d2[,var], useNA = "always")
tx
sum(diag(tx))/sum(tx))
sum(diag(tx))/sum(tx)
kappa2(cbind(d1[,var],d2[,var]))
cbind(d1[,var],d2[,var])
d1 = dAll[dAll$File == f1,]
d2 = dAll[dAll$File == f2,]
# Check conformity
print(paste("Lines align:",all(d1$OriginalText==d2$OriginalText)))
v1 = d1[,var]
v2 = d2[,var]
d1 = dAll[dAll$File == f1,]
d2 = dAll[dAll$File == f2,]
# Check conformity
print(paste("Lines align:",all(d1$OriginalText==d2$OriginalText)))
v1 = d1[,var]
v2 = d2[,var]
v1[is.na(v1)] = "None"
v2[is.na(v2)] = "None"
tx = table(v1, v2, useNA = "always")
tx
v1
tx = table(v1, v2)
tx
c1 = c("Speech","Thought","Speech","Speech","Thought","Thought","Thought","None","None","None","None")
c2 = c("Speech","Speech","Speech","Speech","Thought","Thought","Thought","None","None","None","None")
table(c1,c2)
tx
compareCodings = function(f1,f2,var = "RepresentationMode"){
d1 = dAll[dAll$File == f1,]
d2 = dAll[dAll$File == f2,]
# Check conformity
print(paste("Lines align:",all(d1$OriginalText==d2$OriginalText)))
v1 = d1[,var]
v2 = d2[,var]
v1[is.na(v1)] = "None"
v2[is.na(v2)] = "None"
tx = table(v1, v2)
if("Writing" %in% rownames(tx)){
tx = cbind(tx[,1:3],c(0,0,0,0))
colnames(tx) = c("None", "Speech","Thought","Writing")
}
print(tx)
print(paste("Agreement = ",sum(diag(tx))/sum(tx)))
print(kappa2(cbind(v1,v2)))
}
compareCodings("../data/coding/Sir Isumbras.xlsx",
"../data/coding/Sir Isumbras_HM_Recode.xlsx")
compareCodings("../data/coding/Lay le Freine.xlsx",
"../data/coding/Lay le Freine_HM_Recode.xlsx")
compareCodings("../data/coding/Sir Orfeo.xlsx",
"../data/coding/Sir Orfeo_HM_Recode.xlsx")
names(dAll)
compareCodings("../data/coding/Lay le Freine.xlsx",
"../data/coding/Lay le Freine_HM_Recode.xlsx")
names(dAll)
compareCodings = function(f1,f2,var = "RepresentationMode"){
print("---------------------")
print(paste("Comparing:",var))
d1 = dAll[dAll$File == f1,]
d2 = dAll[dAll$File == f2,]
# Check conformity
print(paste("Lines align:",all(d1$OriginalText==d2$OriginalText)))
c1 = d1[,var]
c2 = d2[,var]
c1[is.na(v1)] = "None"
c2[is.na(v2)] = "None"
tx = table(c1, c2)
if("Writing" %in% rownames(tx)){
tx = cbind(tx[,1:3],c(0,0,0,0))
colnames(tx) = c("None", "Speech","Thought","Writing")
}
print(tx)
print(paste("Agreement = ",sum(diag(tx))/sum(tx)))
print(kappa2(cbind(c1,c2)))
}
compareCodings("../data/coding/Sir Isumbras.xlsx",
"../data/coding/Sir Isumbras_HM_Recode.xlsx")
kap = kappa2(cbind(c1,c2))
kap$statistic
kap$value
kap
kap$value
round(kap$value,3)
kap$statistic
c1
compareCodings = function(f1,f2,var = "RepresentationMode"){
print("---------------------")
print(paste("Comparing:",var))
d1 = dAll[dAll$File == f1,]
d2 = dAll[dAll$File == f2,]
# Check conformity
print(paste("Lines align:",all(d1$OriginalText==d2$OriginalText)))
c1 = d1[,var]
c2 = d2[,var]
c1[is.na(v1)] = "None"
c2[is.na(v2)] = "None"
tx = table(c1, c2)
if("Writing" %in% rownames(tx)){
tx = cbind(tx[,1:3],c(0,0,0,0))
colnames(tx) = c("None", "Speech","Thought","Writing")
}
print(tx)
print(paste("Agreement = ",sum(diag(tx))/sum(tx)))
kap = kappa2(cbind(c1,c2))
print(paste("Cohen's Kappa:",
round(kap$value,3),
"(z =",round(kap$statistic,3),
", p =",round(kap$p.value,3),")"))
}
compareCodings("../data/coding/Sir Isumbras.xlsx",
"../data/coding/Sir Isumbras_HM_Recode.xlsx")
compareCodings("../data/coding/Sir Isumbras.xlsx",
"../data/coding/Sir Isumbras_HM_Recode.xlsx",
"PrimaryRepresentationType")
compareCodings("../data/coding/Sir Isumbras.xlsx",
"../data/coding/Sir Isumbras_HM_Recode.xlsx",
"SecondaryRepresentationType")
compareCodings("../data/coding/Sir Isumbras.xlsx",
"../data/coding/Sir Isumbras_HM_Recode.xlsx",
"SecondaryRepresentation.Type")
f1 = "../data/coding/Lay le Freine.xlsx"
f2 = "../data/coding/Lay le Freine_HM_Recode.xlsx"
compareCodings(f1,f2)
f1 = dAll
f2 = dAll
compareCodings(f1,f2)
compareCodings = function(d1,d2,var = "RepresentationMode"){
print("---------------------")
print(paste("Comparing:",var))
# Check conformity
print(paste("Lines align:",all(d1$OriginalText==d2$OriginalText)))
c1 = d1[,var]
c2 = d2[,var]
c1[is.na(c1)] = "None"
c2[is.na(c2)] = "None"
tx = table(c1, c2)
if("Writing" %in% rownames(tx)){
tx = cbind(tx[,1:3],c(0,0,0,0))
colnames(tx) = c("None", "Speech","Thought","Writing")
}
print(tx)
print(paste("Agreement = ",sum(diag(tx))/sum(tx)))
kap = kappa2(cbind(c1,c2))
print(paste("Cohen's Kappa:",
round(kap$value,3),
"(z =",round(kap$statistic,3),
", p =",round(kap$p.value,3),")"))
}
f1 = dAll
f2 = dAll
compareCodings(f1,f2)
dim(dAll)
f1 = dAll[!grepl("Recode",dAll$File),]
f2 = dAll[grepl("Recode",dAll$File),]
compareCodings(f1,f2)
compareCodings(f1,f2,"PrimaryRepresentationType")
compareCodings(f1,f2,"SecondaryRepresentation.Type")
f1 = dAll[!grepl("Recode",dAll$File),]
f2 = dAll[grepl("Recode",dAll$File),]
compareCodings(f1,f2)
compareCodings(f1,f2,"PrimaryRepresentationType")
compareCodings(f1,f2,"SecondaryRepresentation.Type")
names(dAll)
dx = cbind(d1[,c("OriginalText","Speaker",var)],
d2[,var])
names(dx) = c("OriginalText","Speaker","RepMode_Coder1","RepMode_Coder2")
compareCodings = function(d1,d2,var = "RepresentationMode",lab=""){
print("---------------------")
print(paste("Comparing:",var))
# Check conformity
print(paste("Lines align:",all(d1$OriginalText==d2$OriginalText)))
c1 = d1[,var]
c2 = d2[,var]
c1[is.na(c1)] = "None"
c2[is.na(c2)] = "None"
tx = table(c1, c2)
if("Writing" %in% rownames(tx)){
tx = cbind(tx[,1:3],c(0,0,0,0))
colnames(tx) = c("None", "Speech","Thought","Writing")
}
print(tx)
print(paste("Agreement = ",sum(diag(tx))/sum(tx)))
kap = kappa2(cbind(c1,c2))
print(paste("Cohen's Kappa:",
round(kap$value,3),
"(z =",round(kap$statistic,3),
", p =",round(kap$p.value,3),")"))
if(var=="RepresentationMode"){
dx = cbind(d1[,c("OriginalText","Speaker",var)],
d2[,var])
names(dx) = c("OriginalText","Speaker","RepMode_Coder1","RepMode_Coder2")
dx = dx[c1!=c2,]
write.csv(dx,file= paste0("../data/reliability/",lab,".csv"))
}
}
f1 = dAll[dAll$File == "../data/coding/Sir Isumbras.xlsx",]
f2 = dAll[dAll$File == "../data/coding/Sir Isumbras_HM_Recode.xlsx",]
compareCodings(f1,f2,lab="SirIsumbras_Compare")
compareCodings = function(d1,d2,var = "RepresentationMode",lab=""){
print("---------------------")
print(paste("Comparing:",var))
# Check conformity
print(paste("Lines align:",all(d1$OriginalText==d2$OriginalText)))
c1 = d1[,var]
c2 = d2[,var]
c1[is.na(c1)] = "None"
c2[is.na(c2)] = "None"
tx = table(c1, c2)
if("Writing" %in% rownames(tx)){
tx = cbind(tx[,1:3],c(0,0,0,0))
colnames(tx) = c("None", "Speech","Thought","Writing")
}
print(tx)
print(paste("Agreement = ",sum(diag(tx))/sum(tx)))
kap = kappa2(cbind(c1,c2))
print(paste("Cohen's Kappa:",
round(kap$value,3),
"(z =",round(kap$statistic,3),
", p =",round(kap$p.value,3),")"))
if(var=="RepresentationMode"){
dx = cbind(d1[,c("LineNumber","OriginalText","Speaker",var)],
d2[,var])
names(dx) = c("LineNumber","OriginalText","Speaker","RepMode_Coder1","RepMode_Coder2")
dx = dx[c1!=c2,]
write.csv(dx,file= paste0("../data/reliability/",lab,".csv"))
}
}
compareCodings = function(d1,d2,var = "RepresentationMode",lab=""){
print("---------------------")
print(paste("Comparing:",var))
# Check conformity
print(paste("Lines align:",all(d1$OriginalText==d2$OriginalText)))
c1 = d1[,var]
c2 = d2[,var]
c1[is.na(c1)] = "None"
c2[is.na(c2)] = "None"
tx = table(c1, c2)
if("Writing" %in% rownames(tx)){
tx = cbind(tx[,1:3],c(0,0,0,0))
colnames(tx) = c("None", "Speech","Thought","Writing")
}
print(tx)
print(paste("Agreement = ",sum(diag(tx))/sum(tx)))
kap = kappa2(cbind(c1,c2))
print(paste("Cohen's Kappa:",
round(kap$value,3),
"(z =",round(kap$statistic,3),
", p =",round(kap$p.value,3),")"))
if(var=="RepresentationMode"){
dx = cbind(d1[,c("LineNumber","OriginalText","Speaker",var)],
d2[,var])
names(dx) = c("LineNumber","OriginalText","Speaker","RepMode_Coder1","RepMode_Coder2")
dx = dx[c1!=c2,]
write.csv(dx,file= paste0("../data/reliability/",lab,".csv"),
row.names = F)
}
}
f1 = dAll[!grepl("Recode",dAll$File),]
f2 = dAll[grepl("Recode",dAll$File),]
compareCodings(f1,f2)
compareCodings = function(d1,d2,var = "RepresentationMode",lab=""){
print("---------------------")
print(paste("Comparing:",var))
# Check conformity
print(paste("Lines align:",all(d1$OriginalText==d2$OriginalText)))
c1 = d1[,var]
c2 = d2[,var]
c1[is.na(c1)] = "None"
c2[is.na(c2)] = "None"
tx = table(c1, c2)
if("Writing" %in% rownames(tx)){
tx = cbind(tx[,1:3],c(0,0,0,0))
colnames(tx) = c("None", "Speech","Thought","Writing")
}
print(tx)
print(paste("Agreement = ",sum(diag(tx))/sum(tx)))
kap = kappa2(cbind(c1,c2))
print(paste("Cohen's Kappa:",
round(kap$value,3),
"(z =",round(kap$statistic,3),
", p =",round(kap$p.value,3),")"))
if(var=="RepresentationMode"){
dx = cbind(d1[,c("LineNumber","OriginalText","Speaker",var)],
d2[,var])
names(dx) = c("LineNumber","OriginalText","Speaker","RepMode_Coder1","RepMode_Coder2")
dx = dx[c1!=c2,]
write.csv(dx,file= paste0("../data/reliability/",lab,".csv"),
row.names = F)
}
}
f1 = dAll[!grepl("Recode",dAll$File),]
f2 = dAll[grepl("Recode",dAll$File),]
compareCodings(f1,f2)
compareCodings = function(d1,d2,var = "RepresentationMode",lab=""){
print("---------------------")
print(paste("Comparing:",var))
# Check conformity
print(paste("Lines align:",all(d1$OriginalText==d2$OriginalText)))
c1 = d1[,var]
c2 = d2[,var]
c1[is.na(c1)] = "None"
c2[is.na(c2)] = "None"
tx = table(c1, c2)
if("Writing" %in% rownames(tx)){
tx = cbind(tx[,1:3],c(0,0,0,0))
colnames(tx) = c("None", "Speech","Thought","Writing")
}
print(tx)
print(paste("Agreement = ",sum(diag(tx))/sum(tx)))
kap = kappa2(cbind(c1,c2))
print(paste("Cohen's Kappa:",
round(kap$value,3),
"(z =",round(kap$statistic,3),
", p =",round(kap$p.value,3),")"))
if(var=="RepresentationMode"){
dx = cbind(d1[,c("LineNumber","OriginalText","Speaker",var)],
d2[,var])
names(dx) = c("LineNumber","OriginalText","Speaker","RepMode_Coder1","RepMode_Coder2")
dx = dx[c1!=c2,]
write.csv(dx,file= paste0("../data/reliability/",lab,".csv"),
row.names = F)
}
}
compareCodings(f1,f2)
f1 = dAll[dAll$File == "../data/coding/Sir Isumbras.xlsx",]
f2 = dAll[dAll$File == "../data/coding/Sir Isumbras_HM_Recode.xlsx",]
compareCodings(f1,f2,lab="SirIsumbras_Compare")
compareCodings(f1,f2,"PrimaryRepresentationType")
f1 = dAll[dAll$File == "../data/coding/Sir Isumbras.xlsx",]
f2 = dAll[dAll$File == "../data/coding/Sir Isumbras_HM_Recode.xlsx",]
f1$Speaker==f2$Speaker
table(f1$Speaker==f2$Speaker)
head(cbind(f1$Speaker,f2$Speaker))
x = cbind(f1$Speaker,f2$Speaker)
x = x[!is.na(x[,1]),]
x = x[!is.na(x[,2]),]
head(x)
x = x[!duplicated(x),]
x
x = x[x[,1]!=x[,2],]
x
x
x
x
char = cbind(d1$Speaker,d2$Speaker)
char = char[char[,1]!=char[,2],]
char = char[!is.na(char[,1]),]
char = char[!is.na(char[,2]),]
char
char = char[!duplicated(char),]
char
setwd("~/OneDrive - Cardiff University/Research/Cardiff/ClimageChangeAndLanguage/project/analysis/")
overallData = read.csv("../data/LEXIS/TrilemmaScores_byCountry.csv")
sum(overallData$totalWords)
sum(overallData$docs)
length(unique(overallData$country))
try(setwd("~/OneDrive - Cardiff University/Research/Cardiff/ClimageChangeAndLanguage/project/analysis/"))
d = read.csv("../data/LEXIS/TrilemmaScores_byCountry.csv",stringsAsFactors = F)
d$country[d$country=="South.Africa"] = "SA"
d$country[d$country=="Hong.Kong"] = "HK"
dim(d)
sum(d$docs)
